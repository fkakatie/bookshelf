{"version":3,"sources":["components/Home.js","components/Sidebar.js","components/NoMatch.js","components/Saved.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","Component","Sidebar","className","react_router_dom","to","id","type","name","placeholder","class","NoMatch","Saved","App","components_Sidebar","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mSAceA,mLATP,OACIC,EAAAC,EAAAC,cAAA,0BAJOC,aCqCJC,mLAjCP,OACIJ,EAAAC,EAAAC,cAAA,WAASG,UAAU,WACfL,EAAAC,EAAAC,cAAA,uBAEAF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,KAAT,SAGJP,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,UAAT,YAMRP,EAAAC,EAAAC,cAAA,2CAEAF,EAAAC,EAAAC,cAAA,QAAMM,GAAG,cACLR,EAAAC,EAAAC,cAAA,SACIO,KAAK,OACLC,KAAK,OACLC,YAAY,yBAChBX,EAAAC,EAAAC,cAAA,UAAQO,KAAK,UACTT,EAAAC,EAAAC,cAAA,KAAGU,MAAM,4BA1BXT,aCWPU,mLATP,OACIb,EAAAC,EAAAC,cAAA,8BAJUC,aCYPW,mLATP,OACId,EAAAC,EAAAC,cAAA,2BAJQC,aC0BLY,gMAhBX,OACEf,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QACbL,EAAAC,EAAAC,cAACc,EAAD,MACAhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACIjB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWrB,IACjCC,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAWN,IACtCd,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOG,UAAWP,cAVdV,cCGEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8a0c8b55.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Home extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                Home\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Sidebar extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <section className=\"sidebar\">\r\n                <h1>Bookshelf</h1>\r\n\r\n                <nav>\r\n                    <ul>\r\n                    <li><Link to='/'>\r\n                        Home\r\n                    </Link></li>\r\n                    <li><Link to='/saved'>\r\n                        Saved\r\n                    </Link></li>\r\n                    </ul>\r\n                </nav>\r\n\r\n                <p>This is a project description.</p>\r\n\r\n                <form id=\"bookSearch\">\r\n                    <input \r\n                        type=\"text\" \r\n                        name=\"book\" \r\n                        placeholder=\"Search for a book...\"/>\r\n                    <button type=\"submit\">\r\n                        <i class=\"fas fa-search\"></i>\r\n                    </button>\r\n                </form>\r\n                \r\n            </section>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Sidebar;","import React, { Component } from 'react';\r\n\r\nclass NoMatch extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                No Match\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default NoMatch;","import React, { Component } from 'react';\r\n\r\nclass Saved extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                Saved\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Saved;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Home from \"./components/Home\"\nimport Sidebar from \"./components/Sidebar\"\nimport NoMatch from \"./components/NoMatch\"\nimport Saved from \"./components/Saved\"\nimport './reset.css';\nimport './App.css';\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <Router>\n        <div className=\"grid\">\n          <Sidebar />\n          <Switch>\n              <Route exact path=\"/\" component={Home}/>\n              <Route exact path=\"/saved\" component={Saved}/>\n              <Route component={NoMatch}/>\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}